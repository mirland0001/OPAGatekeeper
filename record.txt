
Report Summary

┌─────────────────────────────┬────────────┬───────────────────┐
│           Target            │    Type    │ Misconfigurations │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/1.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/10.yaml         │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/2.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/3.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/4.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/5.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/6.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/7.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/8.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ contraintes/9.yaml          │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/1-cap.yaml        │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/10-secret.yaml    │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/2-root.yaml       │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/3-annotation.yaml │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/4-affinity.yaml   │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/5-label.yaml      │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/6-privilege.yaml  │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/7-limit.yaml      │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/8-hostpath.yaml   │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ templates/9-probes.yaml     │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/1.yaml                 │ kubernetes │        19         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/10-1.yaml              │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/10-2.yaml              │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/2.yaml                 │ kubernetes │        18         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/3.yaml                 │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/4.yaml                 │ kubernetes │        18         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/5.yaml                 │ kubernetes │         0         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/6.yaml                 │ kubernetes │        18         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/7.yaml                 │ kubernetes │        18         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/8.yaml                 │ kubernetes │        19         │
├─────────────────────────────┼────────────┼───────────────────┤
│ test/9.yaml                 │ kubernetes │        18         │
└─────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


test/1.yaml (kubernetes)
========================
Tests: 96 (SUCCESSES: 77, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hacker' of Pod 'dangerous-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hacker' of Pod 'dangerous-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hacker' of 'pod' 'dangerous-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════════════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hacker' of Pod 'dangerous-pod' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hacker' of Pod 'dangerous-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hacker' of Pod 'dangerous-pod' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hacker' of Pod 'dangerous-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hacker' of Pod 'dangerous-pod' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hacker' of Pod 'dangerous-pod' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hacker' of Pod 'dangerous-pod' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hacker' of Pod 'dangerous-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hacker' of Pod 'dangerous-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'hacker' of Pod 'dangerous-pod' should not set 'securityContext.capabilities.add'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hacker" of pod "dangerous-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0110 (LOW): pod dangerous-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════════════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:5
────────────────────────────────────────────────────────────────────────────────────
   5 [   name: dangerous-pod
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod dangerous-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/1.yaml:7-12
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: hacker
   9 │     image: alpine
  10 │     securityContext:
  11 │       capabilities:
  12 └         add: ["NET_RAW"]  # Capacité réseau dangereuse → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0119 (HIGH): container hacker of pod dangerous-pod in default namespace should not include 'NET_RAW' in securityContext.capabilities.add
════════════════════════════════════════════════════════════════════════════════════
The NET_RAW capability grants attackers the ability to eavesdrop on network traffic or generate IP traffic with falsified source addresses, posing serious security risks.

See https://avd.aquasec.com/misconfig/ksv119
────────────────────────────────────────────────────────────────────────────────────



test/2.yaml (kubernetes)
========================
Tests: 96 (SUCCESSES: 78, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Pod 'root-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Pod 'root-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'pod' 'root-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════════════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine' of Pod 'root-runner' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Pod 'root-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Pod 'root-runner' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Pod 'root-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine' of Pod 'root-runner' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine' of Pod 'root-runner' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine' of Pod 'root-runner' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Pod 'root-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Pod 'root-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of pod "root-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════════════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:12
────────────────────────────────────────────────────────────────────────────────────
  12 [       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0110 (LOW): pod root-runner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════════════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:5
────────────────────────────────────────────────────────────────────────────────────
   5 [   name: root-runner
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod root-runner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/2.yaml:7-12
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: alpine
   9 │     image: alpine
  10 │     command: ["sleep", "infinity"]
  11 │     securityContext:
  12 └       runAsUser: 0  # Explicitement root → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────



test/4.yaml (kubernetes)
========================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Pod 'experimental-runner' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Pod 'experimental-runner' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'pod' 'experimental-runner' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════════════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine' of Pod 'experimental-runner' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Pod 'experimental-runner' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Pod 'experimental-runner' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Pod 'experimental-runner' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine' of Pod 'experimental-runner' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine' of Pod 'experimental-runner' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine' of Pod 'experimental-runner' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Pod 'experimental-runner' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Pod 'experimental-runner' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of pod "experimental-runner" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0110 (LOW): pod experimental-runner in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════════════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:5
────────────────────────────────────────────────────────────────────────────────────
   5 [   name: experimental-runner
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): container experimental-runner in default namespace is using the default security context
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:16-17
────────────────────────────────────────────────────────────────────────────────────
  16 ┌   - name: alpine
  17 └     image: alpine
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod experimental-runner in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/4.yaml:7-17
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   affinity:
   8 │     nodeAffinity:
   9 │       requiredDuringSchedulingIgnoredDuringExecution:
  10 │         nodeSelectorTerms:
  11 │         - matchExpressions:
  12 │           - key: experimental
  13 │             operator: In
  14 │             values: ["true"]  # Affinité interdite → Doit être bloqué
  15 └   containers:
  ..   
────────────────────────────────────────────────────────────────────────────────────



test/6.yaml (kubernetes)
========================
Tests: 96 (SUCCESSES: 78, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'privileged-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'privileged-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'privileged-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════════════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'privileged-pod' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'privileged-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'privileged-pod' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'privileged-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'privileged-pod' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'privileged-pod' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'nginx' of Pod 'privileged-pod' should set 'securityContext.privileged' to false
════════════════════════════════════════════════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'privileged-pod' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'privileged-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'privileged-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "privileged-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:7-10
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0110 (LOW): pod privileged-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════════════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:4
────────────────────────────────────────────────────────────────────────────────────
   4 [   name: privileged-pod
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod privileged-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/6.yaml:6-10
────────────────────────────────────────────────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 │     image: nginx
   9 │     securityContext:
  10 └       privileged: true  # Interdit → Doit être bloqué
────────────────────────────────────────────────────────────────────────────────────



test/7.yaml (kubernetes)
========================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'no-limits-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'no-limits-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'no-limits-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════════════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'no-limits-pod' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'no-limits-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'no-limits-pod' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'no-limits-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'no-limits-pod' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'no-limits-pod' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'no-limits-pod' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'no-limits-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'no-limits-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "no-limits-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0110 (LOW): pod no-limits-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════════════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:4
────────────────────────────────────────────────────────────────────────────────────
   4 [   name: no-limits-pod
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): container no-limits-pod in default namespace is using the default security context
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:7-8
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod no-limits-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/7.yaml:6-8
────────────────────────────────────────────────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: nginx
   8 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────



test/8.yaml (kubernetes)
========================
Tests: 97 (SUCCESSES: 78, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'hostpath-violator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'hostpath-violator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'hostpath-violator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════════════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'hostpath-violator' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'hostpath-violator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'hostpath-violator' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'hostpath-violator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'hostpath-violator' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'hostpath-violator' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'hostpath-violator' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'hostpath-violator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'hostpath-violator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'hostpath-violator' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:7-17
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 │       mountPath: /host-data
  13 │   volumes:
  14 │   - name: host-data
  15 └     hostPath:  # ❌ Violation
  ..   
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "hostpath-violator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hostpath-violator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════════════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:5
────────────────────────────────────────────────────────────────────────────────────
   5 [   name: hostpath-violator
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hostpath-violator in default namespace is using the default security context
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:8-12
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 └       mountPath: /host-data
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hostpath-violator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/8.yaml:7-17
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: nginx
   9 │     image: nginx
  10 │     volumeMounts:
  11 │     - name: host-data
  12 │       mountPath: /host-data
  13 │   volumes:
  14 │   - name: host-data
  15 └     hostPath:  # ❌ Violation
  ..   
────────────────────────────────────────────────────────────────────────────────────



test/9.yaml (kubernetes)
========================
Tests: 97 (SUCCESSES: 79, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ghost' of Pod 'zombie' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ghost' of Pod 'zombie' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════════════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ghost' of 'pod' 'zombie' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════════════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ghost' of Pod 'zombie' should set 'resources.limits.cpu'
════════════════════════════════════════════════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ghost' of Pod 'zombie' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════════════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ghost' of Pod 'zombie' should specify an image tag
════════════════════════════════════════════════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ghost' of Pod 'zombie' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════════════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ghost' of Pod 'zombie' should set 'resources.requests.cpu'
════════════════════════════════════════════════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ghost' of Pod 'zombie' should set 'resources.requests.memory'
════════════════════════════════════════════════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ghost' of Pod 'zombie' should set 'resources.limits.memory'
════════════════════════════════════════════════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ghost' of Pod 'zombie' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ghost' of Pod 'zombie' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════════════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════════════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ghost" of pod "zombie" in "default" namespace should specify a seccomp profile
════════════════════════════════════════════════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════════════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0110 (LOW): pod zombie in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════════════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:5
────────────────────────────────────────────────────────────────────────────────────
   5 [   name: zombie
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zombie in default namespace is using the default security context
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:8-9
────────────────────────────────────────────────────────────────────────────────────
   8 ┌   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod zombie in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════════════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────────────────────────────────────────────────
 test/9.yaml:7-9
────────────────────────────────────────────────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: ghost
   9 └     image: nginx
────────────────────────────────────────────────────────────────────────────────────


